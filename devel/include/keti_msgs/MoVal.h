// Generated by gencpp from file keti_msgs/MoVal.msg
// DO NOT EDIT!


#ifndef KETI_MSGS_MESSAGE_MOVAL_H
#define KETI_MSGS_MESSAGE_MOVAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keti_msgs
{
template <class ContainerAllocator>
struct MoVal_
{
  typedef MoVal_<ContainerAllocator> Type;

  MoVal_()
    : Steer_Cmd(0.0)
    , SetDispSpeed(0)
    , aReqMax_Cmd(0.0)  {
    }
  MoVal_(const ContainerAllocator& _alloc)
    : Steer_Cmd(0.0)
    , SetDispSpeed(0)
    , aReqMax_Cmd(0.0)  {
  (void)_alloc;
    }



   typedef float _Steer_Cmd_type;
  _Steer_Cmd_type Steer_Cmd;

   typedef uint8_t _SetDispSpeed_type;
  _SetDispSpeed_type SetDispSpeed;

   typedef float _aReqMax_Cmd_type;
  _aReqMax_Cmd_type aReqMax_Cmd;





  typedef boost::shared_ptr< ::keti_msgs::MoVal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keti_msgs::MoVal_<ContainerAllocator> const> ConstPtr;

}; // struct MoVal_

typedef ::keti_msgs::MoVal_<std::allocator<void> > MoVal;

typedef boost::shared_ptr< ::keti_msgs::MoVal > MoValPtr;
typedef boost::shared_ptr< ::keti_msgs::MoVal const> MoValConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keti_msgs::MoVal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keti_msgs::MoVal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace keti_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'keti_msgs': ['/home/dallddungi/keti_ws/src/keti_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::MoVal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::MoVal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::MoVal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::MoVal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::MoVal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::MoVal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keti_msgs::MoVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c68df90795d8d5e4ac08398d3dbc65ad";
  }

  static const char* value(const ::keti_msgs::MoVal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc68df90795d8d5e4ULL;
  static const uint64_t static_value2 = 0xac08398d3dbc65adULL;
};

template<class ContainerAllocator>
struct DataType< ::keti_msgs::MoVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keti_msgs/MoVal";
  }

  static const char* value(const ::keti_msgs::MoVal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keti_msgs::MoVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Steer_Cmd\n\
uint8 SetDispSpeed\n\
float32 aReqMax_Cmd\n\
";
  }

  static const char* value(const ::keti_msgs::MoVal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keti_msgs::MoVal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Steer_Cmd);
      stream.next(m.SetDispSpeed);
      stream.next(m.aReqMax_Cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoVal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keti_msgs::MoVal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keti_msgs::MoVal_<ContainerAllocator>& v)
  {
    s << indent << "Steer_Cmd: ";
    Printer<float>::stream(s, indent + "  ", v.Steer_Cmd);
    s << indent << "SetDispSpeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SetDispSpeed);
    s << indent << "aReqMax_Cmd: ";
    Printer<float>::stream(s, indent + "  ", v.aReqMax_Cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KETI_MSGS_MESSAGE_MOVAL_H
