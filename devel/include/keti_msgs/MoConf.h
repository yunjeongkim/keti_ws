// Generated by gencpp from file keti_msgs/MoConf.msg
// DO NOT EDIT!


#ifndef KETI_MSGS_MESSAGE_MOCONF_H
#define KETI_MSGS_MESSAGE_MOCONF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keti_msgs
{
template <class ContainerAllocator>
struct MoConf_
{
  typedef MoConf_<ContainerAllocator> Type;

  MoConf_()
    : APM_En(false)
    , APM_IGNORE(false)
    , APM_Slevel(0)
    , ASM_En(0)
    , ACC_StopReq(false)
    , Mo_AlvCnt(0)  {
    }
  MoConf_(const ContainerAllocator& _alloc)
    : APM_En(false)
    , APM_IGNORE(false)
    , APM_Slevel(0)
    , ASM_En(0)
    , ACC_StopReq(false)
    , Mo_AlvCnt(0)  {
  (void)_alloc;
    }



   typedef uint8_t _APM_En_type;
  _APM_En_type APM_En;

   typedef uint8_t _APM_IGNORE_type;
  _APM_IGNORE_type APM_IGNORE;

   typedef uint8_t _APM_Slevel_type;
  _APM_Slevel_type APM_Slevel;

   typedef uint8_t _ASM_En_type;
  _ASM_En_type ASM_En;

   typedef uint8_t _ACC_StopReq_type;
  _ACC_StopReq_type ACC_StopReq;

   typedef uint8_t _Mo_AlvCnt_type;
  _Mo_AlvCnt_type Mo_AlvCnt;





  typedef boost::shared_ptr< ::keti_msgs::MoConf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keti_msgs::MoConf_<ContainerAllocator> const> ConstPtr;

}; // struct MoConf_

typedef ::keti_msgs::MoConf_<std::allocator<void> > MoConf;

typedef boost::shared_ptr< ::keti_msgs::MoConf > MoConfPtr;
typedef boost::shared_ptr< ::keti_msgs::MoConf const> MoConfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keti_msgs::MoConf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keti_msgs::MoConf_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace keti_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'keti_msgs': ['/home/dallddungi/keti_ws/src/keti_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::MoConf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::MoConf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::MoConf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::MoConf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::MoConf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::MoConf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keti_msgs::MoConf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88553aee21526e55707e4beec0e2dbf9";
  }

  static const char* value(const ::keti_msgs::MoConf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88553aee21526e55ULL;
  static const uint64_t static_value2 = 0x707e4beec0e2dbf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::keti_msgs::MoConf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keti_msgs/MoConf";
  }

  static const char* value(const ::keti_msgs::MoConf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keti_msgs::MoConf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool APM_En\n\
bool APM_IGNORE\n\
uint8 APM_Slevel\n\
uint8 ASM_En\n\
bool ACC_StopReq\n\
uint8 Mo_AlvCnt\n\
";
  }

  static const char* value(const ::keti_msgs::MoConf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keti_msgs::MoConf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.APM_En);
      stream.next(m.APM_IGNORE);
      stream.next(m.APM_Slevel);
      stream.next(m.ASM_En);
      stream.next(m.ACC_StopReq);
      stream.next(m.Mo_AlvCnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoConf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keti_msgs::MoConf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keti_msgs::MoConf_<ContainerAllocator>& v)
  {
    s << indent << "APM_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.APM_En);
    s << indent << "APM_IGNORE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.APM_IGNORE);
    s << indent << "APM_Slevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.APM_Slevel);
    s << indent << "ASM_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ASM_En);
    s << indent << "ACC_StopReq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_StopReq);
    s << indent << "Mo_AlvCnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mo_AlvCnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KETI_MSGS_MESSAGE_MOCONF_H
