// Generated by gencpp from file keti_msgs/Misc.msg
// DO NOT EDIT!


#ifndef KETI_MSGS_MESSAGE_MISC_H
#define KETI_MSGS_MESSAGE_MISC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keti_msgs
{
template <class ContainerAllocator>
struct Misc_
{
  typedef Misc_<ContainerAllocator> Type;

  Misc_()
    : Switch_Plus(false)
    , Switch_Minus(false)
    , Switch_cancel(false)
    , Switch_ACC(false)
    , Accel_Pedal_Pushed(false)
    , Brake_Pedal_Pushed(false)
    , Mo_Fd_Alv_Cnt(0)  {
    }
  Misc_(const ContainerAllocator& _alloc)
    : Switch_Plus(false)
    , Switch_Minus(false)
    , Switch_cancel(false)
    , Switch_ACC(false)
    , Accel_Pedal_Pushed(false)
    , Brake_Pedal_Pushed(false)
    , Mo_Fd_Alv_Cnt(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Switch_Plus_type;
  _Switch_Plus_type Switch_Plus;

   typedef uint8_t _Switch_Minus_type;
  _Switch_Minus_type Switch_Minus;

   typedef uint8_t _Switch_cancel_type;
  _Switch_cancel_type Switch_cancel;

   typedef uint8_t _Switch_ACC_type;
  _Switch_ACC_type Switch_ACC;

   typedef uint8_t _Accel_Pedal_Pushed_type;
  _Accel_Pedal_Pushed_type Accel_Pedal_Pushed;

   typedef uint8_t _Brake_Pedal_Pushed_type;
  _Brake_Pedal_Pushed_type Brake_Pedal_Pushed;

   typedef uint8_t _Mo_Fd_Alv_Cnt_type;
  _Mo_Fd_Alv_Cnt_type Mo_Fd_Alv_Cnt;





  typedef boost::shared_ptr< ::keti_msgs::Misc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keti_msgs::Misc_<ContainerAllocator> const> ConstPtr;

}; // struct Misc_

typedef ::keti_msgs::Misc_<std::allocator<void> > Misc;

typedef boost::shared_ptr< ::keti_msgs::Misc > MiscPtr;
typedef boost::shared_ptr< ::keti_msgs::Misc const> MiscConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keti_msgs::Misc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keti_msgs::Misc_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace keti_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'keti_msgs': ['/home/dallddungi/keti_ws/src/keti_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::Misc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::Misc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::Misc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::Misc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::Misc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::Misc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keti_msgs::Misc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a7483f16b1f4eff5a04bdcb10871411";
  }

  static const char* value(const ::keti_msgs::Misc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a7483f16b1f4effULL;
  static const uint64_t static_value2 = 0x5a04bdcb10871411ULL;
};

template<class ContainerAllocator>
struct DataType< ::keti_msgs::Misc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keti_msgs/Misc";
  }

  static const char* value(const ::keti_msgs::Misc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keti_msgs::Misc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Messege that has a data related to vehicle's command from ECU\n\
bool Switch_Plus\n\
bool Switch_Minus\n\
bool Switch_cancel\n\
bool Switch_ACC\n\
bool Accel_Pedal_Pushed\n\
bool Brake_Pedal_Pushed\n\
uint8 Mo_Fd_Alv_Cnt\n\
\n\
";
  }

  static const char* value(const ::keti_msgs::Misc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keti_msgs::Misc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Switch_Plus);
      stream.next(m.Switch_Minus);
      stream.next(m.Switch_cancel);
      stream.next(m.Switch_ACC);
      stream.next(m.Accel_Pedal_Pushed);
      stream.next(m.Brake_Pedal_Pushed);
      stream.next(m.Mo_Fd_Alv_Cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Misc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keti_msgs::Misc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keti_msgs::Misc_<ContainerAllocator>& v)
  {
    s << indent << "Switch_Plus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Switch_Plus);
    s << indent << "Switch_Minus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Switch_Minus);
    s << indent << "Switch_cancel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Switch_cancel);
    s << indent << "Switch_ACC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Switch_ACC);
    s << indent << "Accel_Pedal_Pushed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Accel_Pedal_Pushed);
    s << indent << "Brake_Pedal_Pushed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Brake_Pedal_Pushed);
    s << indent << "Mo_Fd_Alv_Cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mo_Fd_Alv_Cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KETI_MSGS_MESSAGE_MISC_H
