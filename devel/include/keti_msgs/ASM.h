// Generated by gencpp from file keti_msgs/ASM.msg
// DO NOT EDIT!


#ifndef KETI_MSGS_MESSAGE_ASM_H
#define KETI_MSGS_MESSAGE_ASM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keti_msgs
{
template <class ContainerAllocator>
struct ASM_
{
  typedef ASM_<ContainerAllocator> Type;

  ASM_()
    : ASM_Fd_EN(false)
    , Mo_Fd_State(0)
    , ACC_Fd_ErrBit_PD(false)
    , ACC_Fd_ErrBit_TCU(false)
    , ACC_Fd_ErrBit_ASM(false)
    , ACC_Fd_VSpeed(0)
    , Mo_Fd_AlvCnt(0)  {
    }
  ASM_(const ContainerAllocator& _alloc)
    : ASM_Fd_EN(false)
    , Mo_Fd_State(0)
    , ACC_Fd_ErrBit_PD(false)
    , ACC_Fd_ErrBit_TCU(false)
    , ACC_Fd_ErrBit_ASM(false)
    , ACC_Fd_VSpeed(0)
    , Mo_Fd_AlvCnt(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ASM_Fd_EN_type;
  _ASM_Fd_EN_type ASM_Fd_EN;

   typedef uint8_t _Mo_Fd_State_type;
  _Mo_Fd_State_type Mo_Fd_State;

   typedef uint8_t _ACC_Fd_ErrBit_PD_type;
  _ACC_Fd_ErrBit_PD_type ACC_Fd_ErrBit_PD;

   typedef uint8_t _ACC_Fd_ErrBit_TCU_type;
  _ACC_Fd_ErrBit_TCU_type ACC_Fd_ErrBit_TCU;

   typedef uint8_t _ACC_Fd_ErrBit_ASM_type;
  _ACC_Fd_ErrBit_ASM_type ACC_Fd_ErrBit_ASM;

   typedef uint8_t _ACC_Fd_VSpeed_type;
  _ACC_Fd_VSpeed_type ACC_Fd_VSpeed;

   typedef uint8_t _Mo_Fd_AlvCnt_type;
  _Mo_Fd_AlvCnt_type Mo_Fd_AlvCnt;





  typedef boost::shared_ptr< ::keti_msgs::ASM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keti_msgs::ASM_<ContainerAllocator> const> ConstPtr;

}; // struct ASM_

typedef ::keti_msgs::ASM_<std::allocator<void> > ASM;

typedef boost::shared_ptr< ::keti_msgs::ASM > ASMPtr;
typedef boost::shared_ptr< ::keti_msgs::ASM const> ASMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keti_msgs::ASM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keti_msgs::ASM_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace keti_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'keti_msgs': ['/home/dallddungi/keti_ws/src/keti_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::ASM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keti_msgs::ASM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::ASM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keti_msgs::ASM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::ASM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keti_msgs::ASM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keti_msgs::ASM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be08424c4fe25594caaf435dda4497a5";
  }

  static const char* value(const ::keti_msgs::ASM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe08424c4fe25594ULL;
  static const uint64_t static_value2 = 0xcaaf435dda4497a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::keti_msgs::ASM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keti_msgs/ASM";
  }

  static const char* value(const ::keti_msgs::ASM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keti_msgs::ASM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Messege that has a data related to velocity from ECU\n\
bool ASM_Fd_EN\n\
uint8 Mo_Fd_State\n\
bool ACC_Fd_ErrBit_PD\n\
bool ACC_Fd_ErrBit_TCU\n\
bool ACC_Fd_ErrBit_ASM\n\
uint8 ACC_Fd_VSpeed     # vehicle's current speed\n\
uint8 Mo_Fd_AlvCnt\n\
\n\
";
  }

  static const char* value(const ::keti_msgs::ASM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keti_msgs::ASM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ASM_Fd_EN);
      stream.next(m.Mo_Fd_State);
      stream.next(m.ACC_Fd_ErrBit_PD);
      stream.next(m.ACC_Fd_ErrBit_TCU);
      stream.next(m.ACC_Fd_ErrBit_ASM);
      stream.next(m.ACC_Fd_VSpeed);
      stream.next(m.Mo_Fd_AlvCnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ASM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keti_msgs::ASM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keti_msgs::ASM_<ContainerAllocator>& v)
  {
    s << indent << "ASM_Fd_EN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ASM_Fd_EN);
    s << indent << "Mo_Fd_State: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mo_Fd_State);
    s << indent << "ACC_Fd_ErrBit_PD: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_Fd_ErrBit_PD);
    s << indent << "ACC_Fd_ErrBit_TCU: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_Fd_ErrBit_TCU);
    s << indent << "ACC_Fd_ErrBit_ASM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_Fd_ErrBit_ASM);
    s << indent << "ACC_Fd_VSpeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ACC_Fd_VSpeed);
    s << indent << "Mo_Fd_AlvCnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mo_Fd_AlvCnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KETI_MSGS_MESSAGE_ASM_H
