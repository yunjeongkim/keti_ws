# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from keti_msgs/APM.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class APM(genpy.Message):
  _md5sum = "db7178b9020923d4d2402ddc447555fb"
  _type = "keti_msgs/APM"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Messege that has a data related to steering angle from ECU
bool APM_Fd_EN    # Manual/Auto mode transformation request: 0:disable, 1: enable
uint8 Mo_Fd_State
bool APM_Fd_ErrBit_PD
bool APM_Fd_ErrBit_APM
bool APM_Fd_ErrBit_VInfo
bool APM_Fd_ErrBit_SAS
bool APM_Fd_Ovrrd_Ignore
bool APM_Fd_Override
float32 APM_Fd_SteerAngle   # current steering angle
float32 APM_Fd_Steer_Torq # steering torqe value
float32 APM_Fd_Str_out_tq
#int8 APM_Fd_Str_out_tq
uint8 Mo_Fd_AlvCnt





"""
  __slots__ = ['APM_Fd_EN','Mo_Fd_State','APM_Fd_ErrBit_PD','APM_Fd_ErrBit_APM','APM_Fd_ErrBit_VInfo','APM_Fd_ErrBit_SAS','APM_Fd_Ovrrd_Ignore','APM_Fd_Override','APM_Fd_SteerAngle','APM_Fd_Steer_Torq','APM_Fd_Str_out_tq','Mo_Fd_AlvCnt']
  _slot_types = ['bool','uint8','bool','bool','bool','bool','bool','bool','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       APM_Fd_EN,Mo_Fd_State,APM_Fd_ErrBit_PD,APM_Fd_ErrBit_APM,APM_Fd_ErrBit_VInfo,APM_Fd_ErrBit_SAS,APM_Fd_Ovrrd_Ignore,APM_Fd_Override,APM_Fd_SteerAngle,APM_Fd_Steer_Torq,APM_Fd_Str_out_tq,Mo_Fd_AlvCnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(APM, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.APM_Fd_EN is None:
        self.APM_Fd_EN = False
      if self.Mo_Fd_State is None:
        self.Mo_Fd_State = 0
      if self.APM_Fd_ErrBit_PD is None:
        self.APM_Fd_ErrBit_PD = False
      if self.APM_Fd_ErrBit_APM is None:
        self.APM_Fd_ErrBit_APM = False
      if self.APM_Fd_ErrBit_VInfo is None:
        self.APM_Fd_ErrBit_VInfo = False
      if self.APM_Fd_ErrBit_SAS is None:
        self.APM_Fd_ErrBit_SAS = False
      if self.APM_Fd_Ovrrd_Ignore is None:
        self.APM_Fd_Ovrrd_Ignore = False
      if self.APM_Fd_Override is None:
        self.APM_Fd_Override = False
      if self.APM_Fd_SteerAngle is None:
        self.APM_Fd_SteerAngle = 0.
      if self.APM_Fd_Steer_Torq is None:
        self.APM_Fd_Steer_Torq = 0.
      if self.APM_Fd_Str_out_tq is None:
        self.APM_Fd_Str_out_tq = 0.
      if self.Mo_Fd_AlvCnt is None:
        self.Mo_Fd_AlvCnt = 0
    else:
      self.APM_Fd_EN = False
      self.Mo_Fd_State = 0
      self.APM_Fd_ErrBit_PD = False
      self.APM_Fd_ErrBit_APM = False
      self.APM_Fd_ErrBit_VInfo = False
      self.APM_Fd_ErrBit_SAS = False
      self.APM_Fd_Ovrrd_Ignore = False
      self.APM_Fd_Override = False
      self.APM_Fd_SteerAngle = 0.
      self.APM_Fd_Steer_Torq = 0.
      self.APM_Fd_Str_out_tq = 0.
      self.Mo_Fd_AlvCnt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B3fB().pack(_x.APM_Fd_EN, _x.Mo_Fd_State, _x.APM_Fd_ErrBit_PD, _x.APM_Fd_ErrBit_APM, _x.APM_Fd_ErrBit_VInfo, _x.APM_Fd_ErrBit_SAS, _x.APM_Fd_Ovrrd_Ignore, _x.APM_Fd_Override, _x.APM_Fd_SteerAngle, _x.APM_Fd_Steer_Torq, _x.APM_Fd_Str_out_tq, _x.Mo_Fd_AlvCnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.APM_Fd_EN, _x.Mo_Fd_State, _x.APM_Fd_ErrBit_PD, _x.APM_Fd_ErrBit_APM, _x.APM_Fd_ErrBit_VInfo, _x.APM_Fd_ErrBit_SAS, _x.APM_Fd_Ovrrd_Ignore, _x.APM_Fd_Override, _x.APM_Fd_SteerAngle, _x.APM_Fd_Steer_Torq, _x.APM_Fd_Str_out_tq, _x.Mo_Fd_AlvCnt,) = _get_struct_8B3fB().unpack(str[start:end])
      self.APM_Fd_EN = bool(self.APM_Fd_EN)
      self.APM_Fd_ErrBit_PD = bool(self.APM_Fd_ErrBit_PD)
      self.APM_Fd_ErrBit_APM = bool(self.APM_Fd_ErrBit_APM)
      self.APM_Fd_ErrBit_VInfo = bool(self.APM_Fd_ErrBit_VInfo)
      self.APM_Fd_ErrBit_SAS = bool(self.APM_Fd_ErrBit_SAS)
      self.APM_Fd_Ovrrd_Ignore = bool(self.APM_Fd_Ovrrd_Ignore)
      self.APM_Fd_Override = bool(self.APM_Fd_Override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B3fB().pack(_x.APM_Fd_EN, _x.Mo_Fd_State, _x.APM_Fd_ErrBit_PD, _x.APM_Fd_ErrBit_APM, _x.APM_Fd_ErrBit_VInfo, _x.APM_Fd_ErrBit_SAS, _x.APM_Fd_Ovrrd_Ignore, _x.APM_Fd_Override, _x.APM_Fd_SteerAngle, _x.APM_Fd_Steer_Torq, _x.APM_Fd_Str_out_tq, _x.Mo_Fd_AlvCnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.APM_Fd_EN, _x.Mo_Fd_State, _x.APM_Fd_ErrBit_PD, _x.APM_Fd_ErrBit_APM, _x.APM_Fd_ErrBit_VInfo, _x.APM_Fd_ErrBit_SAS, _x.APM_Fd_Ovrrd_Ignore, _x.APM_Fd_Override, _x.APM_Fd_SteerAngle, _x.APM_Fd_Steer_Torq, _x.APM_Fd_Str_out_tq, _x.Mo_Fd_AlvCnt,) = _get_struct_8B3fB().unpack(str[start:end])
      self.APM_Fd_EN = bool(self.APM_Fd_EN)
      self.APM_Fd_ErrBit_PD = bool(self.APM_Fd_ErrBit_PD)
      self.APM_Fd_ErrBit_APM = bool(self.APM_Fd_ErrBit_APM)
      self.APM_Fd_ErrBit_VInfo = bool(self.APM_Fd_ErrBit_VInfo)
      self.APM_Fd_ErrBit_SAS = bool(self.APM_Fd_ErrBit_SAS)
      self.APM_Fd_Ovrrd_Ignore = bool(self.APM_Fd_Ovrrd_Ignore)
      self.APM_Fd_Override = bool(self.APM_Fd_Override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B3fB = None
def _get_struct_8B3fB():
    global _struct_8B3fB
    if _struct_8B3fB is None:
        _struct_8B3fB = struct.Struct("<8B3fB")
    return _struct_8B3fB
