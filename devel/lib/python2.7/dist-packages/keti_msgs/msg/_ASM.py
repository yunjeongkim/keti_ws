# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from keti_msgs/ASM.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ASM(genpy.Message):
  _md5sum = "be08424c4fe25594caaf435dda4497a5"
  _type = "keti_msgs/ASM"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Messege that has a data related to velocity from ECU
bool ASM_Fd_EN
uint8 Mo_Fd_State
bool ACC_Fd_ErrBit_PD
bool ACC_Fd_ErrBit_TCU
bool ACC_Fd_ErrBit_ASM
uint8 ACC_Fd_VSpeed     # vehicle's current speed
uint8 Mo_Fd_AlvCnt

"""
  __slots__ = ['ASM_Fd_EN','Mo_Fd_State','ACC_Fd_ErrBit_PD','ACC_Fd_ErrBit_TCU','ACC_Fd_ErrBit_ASM','ACC_Fd_VSpeed','Mo_Fd_AlvCnt']
  _slot_types = ['bool','uint8','bool','bool','bool','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ASM_Fd_EN,Mo_Fd_State,ACC_Fd_ErrBit_PD,ACC_Fd_ErrBit_TCU,ACC_Fd_ErrBit_ASM,ACC_Fd_VSpeed,Mo_Fd_AlvCnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ASM, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ASM_Fd_EN is None:
        self.ASM_Fd_EN = False
      if self.Mo_Fd_State is None:
        self.Mo_Fd_State = 0
      if self.ACC_Fd_ErrBit_PD is None:
        self.ACC_Fd_ErrBit_PD = False
      if self.ACC_Fd_ErrBit_TCU is None:
        self.ACC_Fd_ErrBit_TCU = False
      if self.ACC_Fd_ErrBit_ASM is None:
        self.ACC_Fd_ErrBit_ASM = False
      if self.ACC_Fd_VSpeed is None:
        self.ACC_Fd_VSpeed = 0
      if self.Mo_Fd_AlvCnt is None:
        self.Mo_Fd_AlvCnt = 0
    else:
      self.ASM_Fd_EN = False
      self.Mo_Fd_State = 0
      self.ACC_Fd_ErrBit_PD = False
      self.ACC_Fd_ErrBit_TCU = False
      self.ACC_Fd_ErrBit_ASM = False
      self.ACC_Fd_VSpeed = 0
      self.Mo_Fd_AlvCnt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ASM_Fd_EN, _x.Mo_Fd_State, _x.ACC_Fd_ErrBit_PD, _x.ACC_Fd_ErrBit_TCU, _x.ACC_Fd_ErrBit_ASM, _x.ACC_Fd_VSpeed, _x.Mo_Fd_AlvCnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ASM_Fd_EN, _x.Mo_Fd_State, _x.ACC_Fd_ErrBit_PD, _x.ACC_Fd_ErrBit_TCU, _x.ACC_Fd_ErrBit_ASM, _x.ACC_Fd_VSpeed, _x.Mo_Fd_AlvCnt,) = _get_struct_7B().unpack(str[start:end])
      self.ASM_Fd_EN = bool(self.ASM_Fd_EN)
      self.ACC_Fd_ErrBit_PD = bool(self.ACC_Fd_ErrBit_PD)
      self.ACC_Fd_ErrBit_TCU = bool(self.ACC_Fd_ErrBit_TCU)
      self.ACC_Fd_ErrBit_ASM = bool(self.ACC_Fd_ErrBit_ASM)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ASM_Fd_EN, _x.Mo_Fd_State, _x.ACC_Fd_ErrBit_PD, _x.ACC_Fd_ErrBit_TCU, _x.ACC_Fd_ErrBit_ASM, _x.ACC_Fd_VSpeed, _x.Mo_Fd_AlvCnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ASM_Fd_EN, _x.Mo_Fd_State, _x.ACC_Fd_ErrBit_PD, _x.ACC_Fd_ErrBit_TCU, _x.ACC_Fd_ErrBit_ASM, _x.ACC_Fd_VSpeed, _x.Mo_Fd_AlvCnt,) = _get_struct_7B().unpack(str[start:end])
      self.ASM_Fd_EN = bool(self.ASM_Fd_EN)
      self.ACC_Fd_ErrBit_PD = bool(self.ACC_Fd_ErrBit_PD)
      self.ACC_Fd_ErrBit_TCU = bool(self.ACC_Fd_ErrBit_TCU)
      self.ACC_Fd_ErrBit_ASM = bool(self.ACC_Fd_ErrBit_ASM)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
