# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from keti_msgs/Misc.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Misc(genpy.Message):
  _md5sum = "9a7483f16b1f4eff5a04bdcb10871411"
  _type = "keti_msgs/Misc"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Messege that has a data related to vehicle's command from ECU
bool Switch_Plus
bool Switch_Minus
bool Switch_cancel
bool Switch_ACC
bool Accel_Pedal_Pushed
bool Brake_Pedal_Pushed
uint8 Mo_Fd_Alv_Cnt

"""
  __slots__ = ['Switch_Plus','Switch_Minus','Switch_cancel','Switch_ACC','Accel_Pedal_Pushed','Brake_Pedal_Pushed','Mo_Fd_Alv_Cnt']
  _slot_types = ['bool','bool','bool','bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Switch_Plus,Switch_Minus,Switch_cancel,Switch_ACC,Accel_Pedal_Pushed,Brake_Pedal_Pushed,Mo_Fd_Alv_Cnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Misc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Switch_Plus is None:
        self.Switch_Plus = False
      if self.Switch_Minus is None:
        self.Switch_Minus = False
      if self.Switch_cancel is None:
        self.Switch_cancel = False
      if self.Switch_ACC is None:
        self.Switch_ACC = False
      if self.Accel_Pedal_Pushed is None:
        self.Accel_Pedal_Pushed = False
      if self.Brake_Pedal_Pushed is None:
        self.Brake_Pedal_Pushed = False
      if self.Mo_Fd_Alv_Cnt is None:
        self.Mo_Fd_Alv_Cnt = 0
    else:
      self.Switch_Plus = False
      self.Switch_Minus = False
      self.Switch_cancel = False
      self.Switch_ACC = False
      self.Accel_Pedal_Pushed = False
      self.Brake_Pedal_Pushed = False
      self.Mo_Fd_Alv_Cnt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.Switch_Plus, _x.Switch_Minus, _x.Switch_cancel, _x.Switch_ACC, _x.Accel_Pedal_Pushed, _x.Brake_Pedal_Pushed, _x.Mo_Fd_Alv_Cnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.Switch_Plus, _x.Switch_Minus, _x.Switch_cancel, _x.Switch_ACC, _x.Accel_Pedal_Pushed, _x.Brake_Pedal_Pushed, _x.Mo_Fd_Alv_Cnt,) = _get_struct_7B().unpack(str[start:end])
      self.Switch_Plus = bool(self.Switch_Plus)
      self.Switch_Minus = bool(self.Switch_Minus)
      self.Switch_cancel = bool(self.Switch_cancel)
      self.Switch_ACC = bool(self.Switch_ACC)
      self.Accel_Pedal_Pushed = bool(self.Accel_Pedal_Pushed)
      self.Brake_Pedal_Pushed = bool(self.Brake_Pedal_Pushed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.Switch_Plus, _x.Switch_Minus, _x.Switch_cancel, _x.Switch_ACC, _x.Accel_Pedal_Pushed, _x.Brake_Pedal_Pushed, _x.Mo_Fd_Alv_Cnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.Switch_Plus, _x.Switch_Minus, _x.Switch_cancel, _x.Switch_ACC, _x.Accel_Pedal_Pushed, _x.Brake_Pedal_Pushed, _x.Mo_Fd_Alv_Cnt,) = _get_struct_7B().unpack(str[start:end])
      self.Switch_Plus = bool(self.Switch_Plus)
      self.Switch_Minus = bool(self.Switch_Minus)
      self.Switch_cancel = bool(self.Switch_cancel)
      self.Switch_ACC = bool(self.Switch_ACC)
      self.Accel_Pedal_Pushed = bool(self.Accel_Pedal_Pushed)
      self.Brake_Pedal_Pushed = bool(self.Brake_Pedal_Pushed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
