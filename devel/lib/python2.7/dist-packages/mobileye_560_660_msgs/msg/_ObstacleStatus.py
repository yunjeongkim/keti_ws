# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_560_660_msgs/ObstacleStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObstacleStatus(genpy.Message):
  _md5sum = "b963ecf49d557c90935e49005018b9ff"
  _type = "mobileye_560_660_msgs/ObstacleStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint16 num_obstacles
uint16 timestamp
uint16 application_version
uint16 active_version_number_section
bool left_close_range_cut_in
bool right_close_range_cut_in

uint8 STOP_GO_STOP = 0
uint8 STOP_GO_GO = 1
uint8 STOP_GO_UNDECIDED = 2
uint8 STOP_GO_DRIVER_DECISION_REQUIRED = 3
uint8 STOP_GO_NOT_CALCULATED = 15
uint8 stop_go

uint8 protocol_version
bool close_car

uint8 FAILSAFE_NONE = 0
uint8 FAILSAFE_LOW_SUN = 1
uint8 FAILSAFE_BLUR_IMAGE = 2
uint8 failsafe

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  STOP_GO_STOP = 0
  STOP_GO_GO = 1
  STOP_GO_UNDECIDED = 2
  STOP_GO_DRIVER_DECISION_REQUIRED = 3
  STOP_GO_NOT_CALCULATED = 15
  FAILSAFE_NONE = 0
  FAILSAFE_LOW_SUN = 1
  FAILSAFE_BLUR_IMAGE = 2

  __slots__ = ['header','num_obstacles','timestamp','application_version','active_version_number_section','left_close_range_cut_in','right_close_range_cut_in','stop_go','protocol_version','close_car','failsafe']
  _slot_types = ['std_msgs/Header','uint16','uint16','uint16','uint16','bool','bool','uint8','uint8','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,num_obstacles,timestamp,application_version,active_version_number_section,left_close_range_cut_in,right_close_range_cut_in,stop_go,protocol_version,close_car,failsafe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num_obstacles is None:
        self.num_obstacles = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.application_version is None:
        self.application_version = 0
      if self.active_version_number_section is None:
        self.active_version_number_section = 0
      if self.left_close_range_cut_in is None:
        self.left_close_range_cut_in = False
      if self.right_close_range_cut_in is None:
        self.right_close_range_cut_in = False
      if self.stop_go is None:
        self.stop_go = 0
      if self.protocol_version is None:
        self.protocol_version = 0
      if self.close_car is None:
        self.close_car = False
      if self.failsafe is None:
        self.failsafe = 0
    else:
      self.header = std_msgs.msg.Header()
      self.num_obstacles = 0
      self.timestamp = 0
      self.application_version = 0
      self.active_version_number_section = 0
      self.left_close_range_cut_in = False
      self.right_close_range_cut_in = False
      self.stop_go = 0
      self.protocol_version = 0
      self.close_car = False
      self.failsafe = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4H6B().pack(_x.num_obstacles, _x.timestamp, _x.application_version, _x.active_version_number_section, _x.left_close_range_cut_in, _x.right_close_range_cut_in, _x.stop_go, _x.protocol_version, _x.close_car, _x.failsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.num_obstacles, _x.timestamp, _x.application_version, _x.active_version_number_section, _x.left_close_range_cut_in, _x.right_close_range_cut_in, _x.stop_go, _x.protocol_version, _x.close_car, _x.failsafe,) = _get_struct_4H6B().unpack(str[start:end])
      self.left_close_range_cut_in = bool(self.left_close_range_cut_in)
      self.right_close_range_cut_in = bool(self.right_close_range_cut_in)
      self.close_car = bool(self.close_car)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4H6B().pack(_x.num_obstacles, _x.timestamp, _x.application_version, _x.active_version_number_section, _x.left_close_range_cut_in, _x.right_close_range_cut_in, _x.stop_go, _x.protocol_version, _x.close_car, _x.failsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.num_obstacles, _x.timestamp, _x.application_version, _x.active_version_number_section, _x.left_close_range_cut_in, _x.right_close_range_cut_in, _x.stop_go, _x.protocol_version, _x.close_car, _x.failsafe,) = _get_struct_4H6B().unpack(str[start:end])
      self.left_close_range_cut_in = bool(self.left_close_range_cut_in)
      self.right_close_range_cut_in = bool(self.right_close_range_cut_in)
      self.close_car = bool(self.close_car)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H6B = None
def _get_struct_4H6B():
    global _struct_4H6B
    if _struct_4H6B is None:
        _struct_4H6B = struct.Struct("<4H6B")
    return _struct_4H6B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
