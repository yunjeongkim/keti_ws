# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_560_660_msgs/Tsr.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Tsr(genpy.Message):
  _md5sum = "6181cda0894c479426a7c686589123b7"
  _type = "mobileye_560_660_msgs/Tsr"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 SIGN_TYPE_REGULAR_10 = 0
uint8 SIGN_TYPE_REGULAR_20 = 1
uint8 SIGN_TYPE_REGULAR_30 = 2
uint8 SIGN_TYPE_REGULAR_40 = 3
uint8 SIGN_TYPE_REGULAR_50 = 4
uint8 SIGN_TYPE_REGULAR_60 = 5
uint8 SIGN_TYPE_REGULAR_70 = 6
uint8 SIGN_TYPE_REGULAR_80 = 7
uint8 SIGN_TYPE_REGULAR_90 = 8
uint8 SIGN_TYPE_REGULAR_100 = 9
uint8 SIGN_TYPE_REGULAR_110 = 10
uint8 SIGN_TYPE_REGULAR_120 = 11
uint8 SIGN_TYPE_REGULAR_130 = 12
uint8 SIGN_TYPE_REGULAR_140 = 13
uint8 SIGN_TYPE_REGULAR_END_RESTRICTION_OF_NUMBER = 20
uint8 SIGN_TYPE_ELECTRONIC_10 = 28
uint8 SIGN_TYPE_ELECTRONIC_20 = 29
uint8 SIGN_TYPE_ELECTRONIC_30 = 30
uint8 SIGN_TYPE_ELECTRONIC_40 = 31
uint8 SIGN_TYPE_ELECTRONIC_50 = 32
uint8 SIGN_TYPE_ELECTRONIC_60 = 33
uint8 SIGN_TYPE_ELECTRONIC_70 = 34
uint8 SIGN_TYPE_ELECTRONIC_80 = 35
uint8 SIGN_TYPE_ELECTRONIC_90 = 36
uint8 SIGN_TYPE_ELECTRONIC_100 = 37
uint8 SIGN_TYPE_ELECTRONIC_110 = 38
uint8 SIGN_TYPE_ELECTRONIC_120 = 39
uint8 SIGN_TYPE_ELECTRONIC_130 = 40
uint8 SIGN_TYPE_ELECTRONIC_140 = 41
uint8 SIGN_TYPE_ELECTRONIC_END_RESTRICTION_OF_NUMBER = 50
uint8 SIGN_TYPE_REGULAR_GENERAL_END_ALL_RESTRICTION = 64
uint8 SIGN_TYPE_ELECTRONIC_GENERAL_END_ALL_RESTRICTION = 65
uint8 SIGN_TYPE_REGULAR_5 = 100
uint8 SIGN_TYPE_REGULAR_15 = 101
uint8 SIGN_TYPE_REGULAR_25 = 102
uint8 SIGN_TYPE_REGULAR_35 = 103
uint8 SIGN_TYPE_REGULAR_45 = 104
uint8 SIGN_TYPE_REGULAR_55 = 105
uint8 SIGN_TYPE_REGULAR_65 = 106
uint8 SIGN_TYPE_REGULAR_75 = 107
uint8 SIGN_TYPE_REGULAR_85 = 108
uint8 SIGN_TYPE_REGULAR_95 = 109
uint8 SIGN_TYPE_REGULAR_105 = 110
uint8 SIGN_TYPE_REGULAR_115 = 111
uint8 SIGN_TYPE_REGULAR_125 = 112
uint8 SIGN_TYPE_REGULAR_135 = 113
uint8 SIGN_TYPE_REGULAR_145 = 114
uint8 SIGN_TYPE_ELECTRONIC_5 = 115
uint8 SIGN_TYPE_ELECTRONIC_15 = 116
uint8 SIGN_TYPE_ELECTRONIC_25 = 117
uint8 SIGN_TYPE_ELECTRONIC_35 = 118
uint8 SIGN_TYPE_ELECTRONIC_45 = 119
uint8 SIGN_TYPE_ELECTRONIC_55 = 120
uint8 SIGN_TYPE_ELECTRONIC_65 = 121
uint8 SIGN_TYPE_ELECTRONIC_75 = 122
uint8 SIGN_TYPE_ELECTRONIC_85 = 123
uint8 SIGN_TYPE_ELECTRONIC_95 = 124
uint8 SIGN_TYPE_ELECTRONIC_105 = 125
uint8 SIGN_TYPE_ELECTRONIC_115 = 126
uint8 SIGN_TYPE_ELECTRONIC_125 = 127
uint8 SIGN_TYPE_ELECTRONIC_135 = 128
uint8 SIGN_TYPE_ELECTRONIC_145 = 129
uint8 SIGN_TYPE_REGULAR_MOTORWAY_BEGIN = 171
uint8 SIGN_TYPE_REGULAR_END_OF_MOTORWAY = 172
uint8 SIGN_TYPE_REGULAR_EXPRESSWAY_BEGIN = 173
uint8 SIGN_TYPE_REGULAR_END_OF_EXPRESSWAY = 174
uint8 SIGN_TYPE_REGULAR_PLAYGROUND_AREA_BEGIN = 175
uint8 SIGN_TYPE_REGULAR_END_OF_PLAYGROUND_AREA = 176
uint8 SIGN_TYPE_REGULAR_NO_PASSING_START = 200
uint8 SIGN_TYPE_REGULAR_END_OF_NO_PASSING = 201
uint8 SIGN_TYPE_ELECTRONIC_NO_PASSING_START = 220
uint8 SIGN_TYPE_ELECTRONIC_END_OF_NO_PASSING = 221
uint8 SIGN_TYPE_NONE_DETECTED = 254
uint8 SIGN_TYPE_INVALID = 255
uint8 vision_only_sign_type

uint8 SUPP_SIGN_TYPE_NONE = 0
uint8 SUPP_SIGN_TYPE_RAIN = 1
uint8 SUPP_SIGN_TYPE_SNOW = 2
uint8 SUPP_SIGN_TYPE_TRAILER = 3
uint8 SUPP_SIGN_TYPE_TIME = 4
uint8 SUPP_SIGN_TYPE_ARROW_LEFT = 5
uint8 SUPP_SIGN_TYPE_ARROW_RIGHT = 6
uint8 SUPP_SIGN_TYPE_BEND_ARROW_LEFT = 7
uint8 SUPP_SIGN_TYPE_BEND_ARROW_RIGHT = 8
uint8 SUPP_SIGN_TYPE_TRUCK = 9
uint8 SUPP_SIGN_TYPE_DISTANCE_ARROW = 10
uint8 SUPP_SIGN_TYPE_WEIGHT = 11
uint8 SUPP_SIGN_TYPE_DISTANCE_IN = 12
uint8 SUPP_SIGN_TYPE_TRACTOR = 13
uint8 SUPP_SIGN_TYPE_SNOW_RAIN = 14
uint8 SUPP_SIGN_TYPE_SCHOOL = 15
uint8 SUPP_SIGN_TYPE_RAIN_CLOUD = 16
uint8 SUPP_SIGN_TYPE_FOG = 17
uint8 SUPP_SIGN_TYPE_HAZARDOUS_MATERIALS = 18
uint8 SUPP_SIGN_TYPE_NIGHT = 19
uint8 SUPP_SIGN_TYPE_GENERIC = 20
uint8 SUPP_SIGN_TYPE_RAPPEL = 21
uint8 SUPP_SIGN_TYPE_ZONE = 22
uint8 SUPP_SIGN_TYPE_INVALID = 255
uint8 vision_only_supplementary_sign_type

float32 sign_position_x
float32 sign_position_y
float32 sign_position_z

uint8 FILTER_TYPE_NOT_FILTERED = 0
uint8 FILTER_TYPE_IRRELEVANT_TO_DRIVER = 1
uint8 FILTER_TYPE_ON_VEHICLE = 2
uint8 FILTER_TYPE_EMBEDDED = 3
uint8 filter_type

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  SIGN_TYPE_REGULAR_10 = 0
  SIGN_TYPE_REGULAR_20 = 1
  SIGN_TYPE_REGULAR_30 = 2
  SIGN_TYPE_REGULAR_40 = 3
  SIGN_TYPE_REGULAR_50 = 4
  SIGN_TYPE_REGULAR_60 = 5
  SIGN_TYPE_REGULAR_70 = 6
  SIGN_TYPE_REGULAR_80 = 7
  SIGN_TYPE_REGULAR_90 = 8
  SIGN_TYPE_REGULAR_100 = 9
  SIGN_TYPE_REGULAR_110 = 10
  SIGN_TYPE_REGULAR_120 = 11
  SIGN_TYPE_REGULAR_130 = 12
  SIGN_TYPE_REGULAR_140 = 13
  SIGN_TYPE_REGULAR_END_RESTRICTION_OF_NUMBER = 20
  SIGN_TYPE_ELECTRONIC_10 = 28
  SIGN_TYPE_ELECTRONIC_20 = 29
  SIGN_TYPE_ELECTRONIC_30 = 30
  SIGN_TYPE_ELECTRONIC_40 = 31
  SIGN_TYPE_ELECTRONIC_50 = 32
  SIGN_TYPE_ELECTRONIC_60 = 33
  SIGN_TYPE_ELECTRONIC_70 = 34
  SIGN_TYPE_ELECTRONIC_80 = 35
  SIGN_TYPE_ELECTRONIC_90 = 36
  SIGN_TYPE_ELECTRONIC_100 = 37
  SIGN_TYPE_ELECTRONIC_110 = 38
  SIGN_TYPE_ELECTRONIC_120 = 39
  SIGN_TYPE_ELECTRONIC_130 = 40
  SIGN_TYPE_ELECTRONIC_140 = 41
  SIGN_TYPE_ELECTRONIC_END_RESTRICTION_OF_NUMBER = 50
  SIGN_TYPE_REGULAR_GENERAL_END_ALL_RESTRICTION = 64
  SIGN_TYPE_ELECTRONIC_GENERAL_END_ALL_RESTRICTION = 65
  SIGN_TYPE_REGULAR_5 = 100
  SIGN_TYPE_REGULAR_15 = 101
  SIGN_TYPE_REGULAR_25 = 102
  SIGN_TYPE_REGULAR_35 = 103
  SIGN_TYPE_REGULAR_45 = 104
  SIGN_TYPE_REGULAR_55 = 105
  SIGN_TYPE_REGULAR_65 = 106
  SIGN_TYPE_REGULAR_75 = 107
  SIGN_TYPE_REGULAR_85 = 108
  SIGN_TYPE_REGULAR_95 = 109
  SIGN_TYPE_REGULAR_105 = 110
  SIGN_TYPE_REGULAR_115 = 111
  SIGN_TYPE_REGULAR_125 = 112
  SIGN_TYPE_REGULAR_135 = 113
  SIGN_TYPE_REGULAR_145 = 114
  SIGN_TYPE_ELECTRONIC_5 = 115
  SIGN_TYPE_ELECTRONIC_15 = 116
  SIGN_TYPE_ELECTRONIC_25 = 117
  SIGN_TYPE_ELECTRONIC_35 = 118
  SIGN_TYPE_ELECTRONIC_45 = 119
  SIGN_TYPE_ELECTRONIC_55 = 120
  SIGN_TYPE_ELECTRONIC_65 = 121
  SIGN_TYPE_ELECTRONIC_75 = 122
  SIGN_TYPE_ELECTRONIC_85 = 123
  SIGN_TYPE_ELECTRONIC_95 = 124
  SIGN_TYPE_ELECTRONIC_105 = 125
  SIGN_TYPE_ELECTRONIC_115 = 126
  SIGN_TYPE_ELECTRONIC_125 = 127
  SIGN_TYPE_ELECTRONIC_135 = 128
  SIGN_TYPE_ELECTRONIC_145 = 129
  SIGN_TYPE_REGULAR_MOTORWAY_BEGIN = 171
  SIGN_TYPE_REGULAR_END_OF_MOTORWAY = 172
  SIGN_TYPE_REGULAR_EXPRESSWAY_BEGIN = 173
  SIGN_TYPE_REGULAR_END_OF_EXPRESSWAY = 174
  SIGN_TYPE_REGULAR_PLAYGROUND_AREA_BEGIN = 175
  SIGN_TYPE_REGULAR_END_OF_PLAYGROUND_AREA = 176
  SIGN_TYPE_REGULAR_NO_PASSING_START = 200
  SIGN_TYPE_REGULAR_END_OF_NO_PASSING = 201
  SIGN_TYPE_ELECTRONIC_NO_PASSING_START = 220
  SIGN_TYPE_ELECTRONIC_END_OF_NO_PASSING = 221
  SIGN_TYPE_NONE_DETECTED = 254
  SIGN_TYPE_INVALID = 255
  SUPP_SIGN_TYPE_NONE = 0
  SUPP_SIGN_TYPE_RAIN = 1
  SUPP_SIGN_TYPE_SNOW = 2
  SUPP_SIGN_TYPE_TRAILER = 3
  SUPP_SIGN_TYPE_TIME = 4
  SUPP_SIGN_TYPE_ARROW_LEFT = 5
  SUPP_SIGN_TYPE_ARROW_RIGHT = 6
  SUPP_SIGN_TYPE_BEND_ARROW_LEFT = 7
  SUPP_SIGN_TYPE_BEND_ARROW_RIGHT = 8
  SUPP_SIGN_TYPE_TRUCK = 9
  SUPP_SIGN_TYPE_DISTANCE_ARROW = 10
  SUPP_SIGN_TYPE_WEIGHT = 11
  SUPP_SIGN_TYPE_DISTANCE_IN = 12
  SUPP_SIGN_TYPE_TRACTOR = 13
  SUPP_SIGN_TYPE_SNOW_RAIN = 14
  SUPP_SIGN_TYPE_SCHOOL = 15
  SUPP_SIGN_TYPE_RAIN_CLOUD = 16
  SUPP_SIGN_TYPE_FOG = 17
  SUPP_SIGN_TYPE_HAZARDOUS_MATERIALS = 18
  SUPP_SIGN_TYPE_NIGHT = 19
  SUPP_SIGN_TYPE_GENERIC = 20
  SUPP_SIGN_TYPE_RAPPEL = 21
  SUPP_SIGN_TYPE_ZONE = 22
  SUPP_SIGN_TYPE_INVALID = 255
  FILTER_TYPE_NOT_FILTERED = 0
  FILTER_TYPE_IRRELEVANT_TO_DRIVER = 1
  FILTER_TYPE_ON_VEHICLE = 2
  FILTER_TYPE_EMBEDDED = 3

  __slots__ = ['header','vision_only_sign_type','vision_only_supplementary_sign_type','sign_position_x','sign_position_y','sign_position_z','filter_type']
  _slot_types = ['std_msgs/Header','uint8','uint8','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vision_only_sign_type,vision_only_supplementary_sign_type,sign_position_x,sign_position_y,sign_position_z,filter_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tsr, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vision_only_sign_type is None:
        self.vision_only_sign_type = 0
      if self.vision_only_supplementary_sign_type is None:
        self.vision_only_supplementary_sign_type = 0
      if self.sign_position_x is None:
        self.sign_position_x = 0.
      if self.sign_position_y is None:
        self.sign_position_y = 0.
      if self.sign_position_z is None:
        self.sign_position_z = 0.
      if self.filter_type is None:
        self.filter_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.vision_only_sign_type = 0
      self.vision_only_supplementary_sign_type = 0
      self.sign_position_x = 0.
      self.sign_position_y = 0.
      self.sign_position_z = 0.
      self.filter_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.vision_only_supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.vision_only_sign_type, _x.vision_only_supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.vision_only_supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.vision_only_sign_type, _x.vision_only_supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2B3fB = None
def _get_struct_2B3fB():
    global _struct_2B3fB
    if _struct_2B3fB is None:
        _struct_2B3fB = struct.Struct("<2B3fB")
    return _struct_2B3fB
