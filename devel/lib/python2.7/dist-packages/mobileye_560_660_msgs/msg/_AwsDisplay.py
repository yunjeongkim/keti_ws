# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_560_660_msgs/AwsDisplay.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AwsDisplay(genpy.Message):
  _md5sum = "7aa82a0063aa4c0e719bef3d14c24bf7"
  _type = "mobileye_560_660_msgs/AwsDisplay"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

bool suppress_sound
bool night_time
bool dusk_time

uint8 SOUND_SILENT = 0
uint8 SOUND_LDWL = 1
uint8 SOUND_LDWR = 2
uint8 SOUND_FAR_HW = 3
uint8 SOUND_NEAR_HW = 4
uint8 SOUND_SOFT_FCW = 5
uint8 SOUND_HARD_FCW = 6
uint8 SOUND_RESERVED = 7
uint8 sound_type

bool headway_valid
float32 headway_measurement
bool lanes_on
bool left_ldw_on
bool right_ldw_on
bool fcw_on
bool left_crossing
bool right_crossing
bool maintenance
bool failsafe
bool ped_fcw
bool ped_in_dz

uint8 HEADWAY_LEVEL_OFF = 0
uint8 HEADWAY_LEVEL_GREEN = 1
uint8 HEADWAY_LEVEL_ORANGE = 2
uint8 HEADWAY_LEVEL_RED = 3
uint8 headway_warning_level

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  SOUND_SILENT = 0
  SOUND_LDWL = 1
  SOUND_LDWR = 2
  SOUND_FAR_HW = 3
  SOUND_NEAR_HW = 4
  SOUND_SOFT_FCW = 5
  SOUND_HARD_FCW = 6
  SOUND_RESERVED = 7
  HEADWAY_LEVEL_OFF = 0
  HEADWAY_LEVEL_GREEN = 1
  HEADWAY_LEVEL_ORANGE = 2
  HEADWAY_LEVEL_RED = 3

  __slots__ = ['header','suppress_sound','night_time','dusk_time','sound_type','headway_valid','headway_measurement','lanes_on','left_ldw_on','right_ldw_on','fcw_on','left_crossing','right_crossing','maintenance','failsafe','ped_fcw','ped_in_dz','headway_warning_level']
  _slot_types = ['std_msgs/Header','bool','bool','bool','uint8','bool','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,suppress_sound,night_time,dusk_time,sound_type,headway_valid,headway_measurement,lanes_on,left_ldw_on,right_ldw_on,fcw_on,left_crossing,right_crossing,maintenance,failsafe,ped_fcw,ped_in_dz,headway_warning_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AwsDisplay, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.suppress_sound is None:
        self.suppress_sound = False
      if self.night_time is None:
        self.night_time = False
      if self.dusk_time is None:
        self.dusk_time = False
      if self.sound_type is None:
        self.sound_type = 0
      if self.headway_valid is None:
        self.headway_valid = False
      if self.headway_measurement is None:
        self.headway_measurement = 0.
      if self.lanes_on is None:
        self.lanes_on = False
      if self.left_ldw_on is None:
        self.left_ldw_on = False
      if self.right_ldw_on is None:
        self.right_ldw_on = False
      if self.fcw_on is None:
        self.fcw_on = False
      if self.left_crossing is None:
        self.left_crossing = False
      if self.right_crossing is None:
        self.right_crossing = False
      if self.maintenance is None:
        self.maintenance = False
      if self.failsafe is None:
        self.failsafe = False
      if self.ped_fcw is None:
        self.ped_fcw = False
      if self.ped_in_dz is None:
        self.ped_in_dz = False
      if self.headway_warning_level is None:
        self.headway_warning_level = 0
    else:
      self.header = std_msgs.msg.Header()
      self.suppress_sound = False
      self.night_time = False
      self.dusk_time = False
      self.sound_type = 0
      self.headway_valid = False
      self.headway_measurement = 0.
      self.lanes_on = False
      self.left_ldw_on = False
      self.right_ldw_on = False
      self.fcw_on = False
      self.left_crossing = False
      self.right_crossing = False
      self.maintenance = False
      self.failsafe = False
      self.ped_fcw = False
      self.ped_in_dz = False
      self.headway_warning_level = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5Bf11B().pack(_x.suppress_sound, _x.night_time, _x.dusk_time, _x.sound_type, _x.headway_valid, _x.headway_measurement, _x.lanes_on, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.left_crossing, _x.right_crossing, _x.maintenance, _x.failsafe, _x.ped_fcw, _x.ped_in_dz, _x.headway_warning_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.suppress_sound, _x.night_time, _x.dusk_time, _x.sound_type, _x.headway_valid, _x.headway_measurement, _x.lanes_on, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.left_crossing, _x.right_crossing, _x.maintenance, _x.failsafe, _x.ped_fcw, _x.ped_in_dz, _x.headway_warning_level,) = _get_struct_5Bf11B().unpack(str[start:end])
      self.suppress_sound = bool(self.suppress_sound)
      self.night_time = bool(self.night_time)
      self.dusk_time = bool(self.dusk_time)
      self.headway_valid = bool(self.headway_valid)
      self.lanes_on = bool(self.lanes_on)
      self.left_ldw_on = bool(self.left_ldw_on)
      self.right_ldw_on = bool(self.right_ldw_on)
      self.fcw_on = bool(self.fcw_on)
      self.left_crossing = bool(self.left_crossing)
      self.right_crossing = bool(self.right_crossing)
      self.maintenance = bool(self.maintenance)
      self.failsafe = bool(self.failsafe)
      self.ped_fcw = bool(self.ped_fcw)
      self.ped_in_dz = bool(self.ped_in_dz)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5Bf11B().pack(_x.suppress_sound, _x.night_time, _x.dusk_time, _x.sound_type, _x.headway_valid, _x.headway_measurement, _x.lanes_on, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.left_crossing, _x.right_crossing, _x.maintenance, _x.failsafe, _x.ped_fcw, _x.ped_in_dz, _x.headway_warning_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.suppress_sound, _x.night_time, _x.dusk_time, _x.sound_type, _x.headway_valid, _x.headway_measurement, _x.lanes_on, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.left_crossing, _x.right_crossing, _x.maintenance, _x.failsafe, _x.ped_fcw, _x.ped_in_dz, _x.headway_warning_level,) = _get_struct_5Bf11B().unpack(str[start:end])
      self.suppress_sound = bool(self.suppress_sound)
      self.night_time = bool(self.night_time)
      self.dusk_time = bool(self.dusk_time)
      self.headway_valid = bool(self.headway_valid)
      self.lanes_on = bool(self.lanes_on)
      self.left_ldw_on = bool(self.left_ldw_on)
      self.right_ldw_on = bool(self.right_ldw_on)
      self.fcw_on = bool(self.fcw_on)
      self.left_crossing = bool(self.left_crossing)
      self.right_crossing = bool(self.right_crossing)
      self.maintenance = bool(self.maintenance)
      self.failsafe = bool(self.failsafe)
      self.ped_fcw = bool(self.ped_fcw)
      self.ped_in_dz = bool(self.ped_in_dz)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5Bf11B = None
def _get_struct_5Bf11B():
    global _struct_5Bf11B
    if _struct_5Bf11B is None:
        _struct_5Bf11B = struct.Struct("<5Bf11B")
    return _struct_5Bf11B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
