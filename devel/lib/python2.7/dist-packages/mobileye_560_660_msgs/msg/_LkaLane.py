# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_560_660_msgs/LkaLane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LkaLane(genpy.Message):
  _md5sum = "13c7b357c14488be92473cab7e5461ca"
  _type = "mobileye_560_660_msgs/LkaLane"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 LANE_CONFIDENCE_NONE = 0
uint8 LANE_CONFIDENCE_LOW = 1
uint8 LANE_CONFIDENCE_MED = 2
uint8 LANE_CONFIDENCE_HIGH = 3

uint8 LANE_TYPE_DASHED = 0
uint8 LANE_TYPE_SOLID = 1
uint8 LANE_TYPE_NONE = 2
uint8 LANE_TYPE_ROAD_EDGE = 3
uint8 LANE_TYPE_DOUBLE_LANE_MARK = 4
uint8 LANE_TYPE_BOTTS_DOTS = 5
uint8 LANE_TYPE_INVALID = 6

uint8 lane_type
uint8 quality
uint8 model_degree
float64 position_parameter_c0
float64 curvature_parameter_c2
float64 curvature_derivative_parameter_c3
float32 marking_width
float64 heading_angle_parameter_c1
float32 view_range
bool view_range_availability

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  LANE_CONFIDENCE_NONE = 0
  LANE_CONFIDENCE_LOW = 1
  LANE_CONFIDENCE_MED = 2
  LANE_CONFIDENCE_HIGH = 3
  LANE_TYPE_DASHED = 0
  LANE_TYPE_SOLID = 1
  LANE_TYPE_NONE = 2
  LANE_TYPE_ROAD_EDGE = 3
  LANE_TYPE_DOUBLE_LANE_MARK = 4
  LANE_TYPE_BOTTS_DOTS = 5
  LANE_TYPE_INVALID = 6

  __slots__ = ['header','lane_type','quality','model_degree','position_parameter_c0','curvature_parameter_c2','curvature_derivative_parameter_c3','marking_width','heading_angle_parameter_c1','view_range','view_range_availability']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','float64','float64','float64','float32','float64','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lane_type,quality,model_degree,position_parameter_c0,curvature_parameter_c2,curvature_derivative_parameter_c3,marking_width,heading_angle_parameter_c1,view_range,view_range_availability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LkaLane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_type is None:
        self.lane_type = 0
      if self.quality is None:
        self.quality = 0
      if self.model_degree is None:
        self.model_degree = 0
      if self.position_parameter_c0 is None:
        self.position_parameter_c0 = 0.
      if self.curvature_parameter_c2 is None:
        self.curvature_parameter_c2 = 0.
      if self.curvature_derivative_parameter_c3 is None:
        self.curvature_derivative_parameter_c3 = 0.
      if self.marking_width is None:
        self.marking_width = 0.
      if self.heading_angle_parameter_c1 is None:
        self.heading_angle_parameter_c1 = 0.
      if self.view_range is None:
        self.view_range = 0.
      if self.view_range_availability is None:
        self.view_range_availability = False
    else:
      self.header = std_msgs.msg.Header()
      self.lane_type = 0
      self.quality = 0
      self.model_degree = 0
      self.position_parameter_c0 = 0.
      self.curvature_parameter_c2 = 0.
      self.curvature_derivative_parameter_c3 = 0.
      self.marking_width = 0.
      self.heading_angle_parameter_c1 = 0.
      self.view_range = 0.
      self.view_range_availability = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3dfdfB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_parameter_c3, _x.marking_width, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_parameter_c3, _x.marking_width, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B3dfdfB().unpack(str[start:end])
      self.view_range_availability = bool(self.view_range_availability)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3dfdfB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_parameter_c3, _x.marking_width, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_parameter_c3, _x.marking_width, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B3dfdfB().unpack(str[start:end])
      self.view_range_availability = bool(self.view_range_availability)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3B3dfdfB = None
def _get_struct_3B3dfdfB():
    global _struct_3B3dfdfB
    if _struct_3B3dfdfB is None:
        _struct_3B3dfdfB = struct.Struct("<3B3dfdfB")
    return _struct_3B3dfdfB
