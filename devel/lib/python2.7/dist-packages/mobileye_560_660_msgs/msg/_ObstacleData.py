# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_560_660_msgs/ObstacleData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObstacleData(genpy.Message):
  _md5sum = "ff75c75f79e1f472d5b0086caa5c286f"
  _type = "mobileye_560_660_msgs/ObstacleData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint16 obstacle_id
float64 obstacle_pos_x
float64 obstacle_pos_y

uint8 BLINKER_INFO_UNAVAILABLE = 0
uint8 BLINKER_INFO_OFF = 1
uint8 BLINKER_INFO_LEFT = 2
uint8 BLINKER_INFO_RIGHT = 3
uint8 BLINKER_INFO_BOTH = 4
uint8 blinker_info

uint8 CUT_IN_AND_OUT_UNDEFINED = 0
uint8 CUT_IN_AND_OUT_IN_HOST_LANE = 1
uint8 CUT_IN_AND_OUT_OUT_HOST_LANE = 2
uint8 CUT_IN_AND_OUT_CUT_IN = 3
uint8 CUT_IN_AND_OUT_CUT_OUT = 4
uint8 cut_in_and_out

float64 obstacle_rel_vel_x

uint8 OBSTACLE_TYPE_VEHICLE = 0
uint8 OBSTACLE_TYPE_TRUCK = 1
uint8 OBSTACLE_TYPE_BIKE = 2
uint8 OBSTACLE_TYPE_PED = 3
uint8 OBSTACLE_TYPE_BICYCLE = 4
uint8 obstacle_type

uint8 OBSTACLE_STATUS_UNDEFINED = 0
uint8 OBSTACLE_STATUS_STANDING = 1
uint8 OBSTACLE_STATUS_STOPPED = 2
uint8 OBSTACLE_STATUS_MOVING = 3
uint8 OBSTACLE_STATUS_ONCOMING = 4
uint8 OBSTACLE_STATUS_PARKED = 5
uint8 obstacle_status

bool obstacle_brake_lights

uint8 OBSTACLE_VALID_INVALID = 0
uint8 OBSTACLE_VALID_NEW = 1
uint8 OBSTACLE_VALID_OLDER = 2
uint8 obstacle_valid

float32 obstacle_length
float32 obstacle_width
uint16 obstacle_age

uint8 OBSTACLE_LANE_NOT_ASSIGNED = 0
uint8 OBSTACLE_LANE_EGO_LANE = 1
uint8 OBSTACLE_LANE_NEXT_LANE = 2
uint8 OBSTACLE_LANE_INVALID = 3
uint8 obstacle_lane

bool cipv_flag
float32 radar_pos_x
float32 radar_vel_x

uint8 RADAR_MATCH_CONFIDENCE_NO_MATCH = 0
uint8 RADAR_MATCH_CONFIDENCE_MULTI_MATCH = 1
uint8 RADAR_MATCH_CONFIDENCE_BOUNDED_LOW = 2
uint8 RADAR_MATCH_CONFIDENCE_BOUNDED_MED = 3
uint8 RADAR_MATCH_CONFIDENCE_BOUNDED_HIGH = 4
uint8 RADAR_MATCH_CONFIDENCE_HIGH = 5
uint8 radar_match_confidence

uint16 matched_radar_id
float32 obstacle_angle_rate
float64 obstacle_scale_change
float32 object_accel_x
bool obstacle_replaced
float32 obstacle_angle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  BLINKER_INFO_UNAVAILABLE = 0
  BLINKER_INFO_OFF = 1
  BLINKER_INFO_LEFT = 2
  BLINKER_INFO_RIGHT = 3
  BLINKER_INFO_BOTH = 4
  CUT_IN_AND_OUT_UNDEFINED = 0
  CUT_IN_AND_OUT_IN_HOST_LANE = 1
  CUT_IN_AND_OUT_OUT_HOST_LANE = 2
  CUT_IN_AND_OUT_CUT_IN = 3
  CUT_IN_AND_OUT_CUT_OUT = 4
  OBSTACLE_TYPE_VEHICLE = 0
  OBSTACLE_TYPE_TRUCK = 1
  OBSTACLE_TYPE_BIKE = 2
  OBSTACLE_TYPE_PED = 3
  OBSTACLE_TYPE_BICYCLE = 4
  OBSTACLE_STATUS_UNDEFINED = 0
  OBSTACLE_STATUS_STANDING = 1
  OBSTACLE_STATUS_STOPPED = 2
  OBSTACLE_STATUS_MOVING = 3
  OBSTACLE_STATUS_ONCOMING = 4
  OBSTACLE_STATUS_PARKED = 5
  OBSTACLE_VALID_INVALID = 0
  OBSTACLE_VALID_NEW = 1
  OBSTACLE_VALID_OLDER = 2
  OBSTACLE_LANE_NOT_ASSIGNED = 0
  OBSTACLE_LANE_EGO_LANE = 1
  OBSTACLE_LANE_NEXT_LANE = 2
  OBSTACLE_LANE_INVALID = 3
  RADAR_MATCH_CONFIDENCE_NO_MATCH = 0
  RADAR_MATCH_CONFIDENCE_MULTI_MATCH = 1
  RADAR_MATCH_CONFIDENCE_BOUNDED_LOW = 2
  RADAR_MATCH_CONFIDENCE_BOUNDED_MED = 3
  RADAR_MATCH_CONFIDENCE_BOUNDED_HIGH = 4
  RADAR_MATCH_CONFIDENCE_HIGH = 5

  __slots__ = ['header','obstacle_id','obstacle_pos_x','obstacle_pos_y','blinker_info','cut_in_and_out','obstacle_rel_vel_x','obstacle_type','obstacle_status','obstacle_brake_lights','obstacle_valid','obstacle_length','obstacle_width','obstacle_age','obstacle_lane','cipv_flag','radar_pos_x','radar_vel_x','radar_match_confidence','matched_radar_id','obstacle_angle_rate','obstacle_scale_change','object_accel_x','obstacle_replaced','obstacle_angle']
  _slot_types = ['std_msgs/Header','uint16','float64','float64','uint8','uint8','float64','uint8','uint8','bool','uint8','float32','float32','uint16','uint8','bool','float32','float32','uint8','uint16','float32','float64','float32','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,obstacle_id,obstacle_pos_x,obstacle_pos_y,blinker_info,cut_in_and_out,obstacle_rel_vel_x,obstacle_type,obstacle_status,obstacle_brake_lights,obstacle_valid,obstacle_length,obstacle_width,obstacle_age,obstacle_lane,cipv_flag,radar_pos_x,radar_vel_x,radar_match_confidence,matched_radar_id,obstacle_angle_rate,obstacle_scale_change,object_accel_x,obstacle_replaced,obstacle_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle_id is None:
        self.obstacle_id = 0
      if self.obstacle_pos_x is None:
        self.obstacle_pos_x = 0.
      if self.obstacle_pos_y is None:
        self.obstacle_pos_y = 0.
      if self.blinker_info is None:
        self.blinker_info = 0
      if self.cut_in_and_out is None:
        self.cut_in_and_out = 0
      if self.obstacle_rel_vel_x is None:
        self.obstacle_rel_vel_x = 0.
      if self.obstacle_type is None:
        self.obstacle_type = 0
      if self.obstacle_status is None:
        self.obstacle_status = 0
      if self.obstacle_brake_lights is None:
        self.obstacle_brake_lights = False
      if self.obstacle_valid is None:
        self.obstacle_valid = 0
      if self.obstacle_length is None:
        self.obstacle_length = 0.
      if self.obstacle_width is None:
        self.obstacle_width = 0.
      if self.obstacle_age is None:
        self.obstacle_age = 0
      if self.obstacle_lane is None:
        self.obstacle_lane = 0
      if self.cipv_flag is None:
        self.cipv_flag = False
      if self.radar_pos_x is None:
        self.radar_pos_x = 0.
      if self.radar_vel_x is None:
        self.radar_vel_x = 0.
      if self.radar_match_confidence is None:
        self.radar_match_confidence = 0
      if self.matched_radar_id is None:
        self.matched_radar_id = 0
      if self.obstacle_angle_rate is None:
        self.obstacle_angle_rate = 0.
      if self.obstacle_scale_change is None:
        self.obstacle_scale_change = 0.
      if self.object_accel_x is None:
        self.object_accel_x = 0.
      if self.obstacle_replaced is None:
        self.obstacle_replaced = False
      if self.obstacle_angle is None:
        self.obstacle_angle = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.obstacle_id = 0
      self.obstacle_pos_x = 0.
      self.obstacle_pos_y = 0.
      self.blinker_info = 0
      self.cut_in_and_out = 0
      self.obstacle_rel_vel_x = 0.
      self.obstacle_type = 0
      self.obstacle_status = 0
      self.obstacle_brake_lights = False
      self.obstacle_valid = 0
      self.obstacle_length = 0.
      self.obstacle_width = 0.
      self.obstacle_age = 0
      self.obstacle_lane = 0
      self.cipv_flag = False
      self.radar_pos_x = 0.
      self.radar_vel_x = 0.
      self.radar_match_confidence = 0
      self.matched_radar_id = 0
      self.obstacle_angle_rate = 0.
      self.obstacle_scale_change = 0.
      self.object_accel_x = 0.
      self.obstacle_replaced = False
      self.obstacle_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H2d2Bd4B2fH2B2fBHfdfBf().pack(_x.obstacle_id, _x.obstacle_pos_x, _x.obstacle_pos_y, _x.blinker_info, _x.cut_in_and_out, _x.obstacle_rel_vel_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.obstacle_id, _x.obstacle_pos_x, _x.obstacle_pos_y, _x.blinker_info, _x.cut_in_and_out, _x.obstacle_rel_vel_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_H2d2Bd4B2fH2B2fBHfdfBf().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.cipv_flag = bool(self.cipv_flag)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H2d2Bd4B2fH2B2fBHfdfBf().pack(_x.obstacle_id, _x.obstacle_pos_x, _x.obstacle_pos_y, _x.blinker_info, _x.cut_in_and_out, _x.obstacle_rel_vel_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.obstacle_id, _x.obstacle_pos_x, _x.obstacle_pos_y, _x.blinker_info, _x.cut_in_and_out, _x.obstacle_rel_vel_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_pos_x, _x.radar_vel_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_H2d2Bd4B2fH2B2fBHfdfBf().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.cipv_flag = bool(self.cipv_flag)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H2d2Bd4B2fH2B2fBHfdfBf = None
def _get_struct_H2d2Bd4B2fH2B2fBHfdfBf():
    global _struct_H2d2Bd4B2fH2B2fBHfdfBf
    if _struct_H2d2Bd4B2fH2B2fBHfdfBf is None:
        _struct_H2d2Bd4B2fH2B2fBHfdfBf = struct.Struct("<H2d2Bd4B2fH2B2fBHfdfBf")
    return _struct_H2d2Bd4B2fH2B2fBHfdfBf
